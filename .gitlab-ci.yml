stages:
  - test
  - build
  - release

image: python:3.11.7

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  CURRENT_TIMESTAMP: $(date +"%Y%m%d%H%M")
  POETRY_VIRTUALENVS_PATH: "/root/.cache/pypoetry/virtualenvs/pyEdgeworthBox-$(date +'%Y%m%d%H%M')-py3.11"

cache:
  key: "poetry-${CI_PIPELINE_CREATED_AT}"
  paths:
    - .cache/pip
    - venv/

before_script:
  - python -V  # Print out python version for debugging
  - pip install poetry==1.4.2  # Install Poetry
  - cat pyproject.toml
  - whoami
  - env
  - poetry -vvv env use python3.11
  - poetry -vvv install --no-root

test:
  stage: test
  script:
    - poetry run python -m unittest

build-package:
  stage: build
  script:
    - pip install twine
    - poetry run python setup.py sdist bdist_wheel

build-docker:
  image: docker:19.03.12
  services:
    - docker:19.03.12-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
  stage: build
  needs:
    - build-package
  script:
    - docker info
    - docker build -t my-image .


release-package:
  stage: release
  only:
    - tags
  script:
    - pip install twine
    - poetry run python setup.py sdist bdist_wheel
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*
    - TWINE_PASSWORD=${PYPI_PASSWORD} TWINE_USERNAME=${PYPI_USERNAME} python -m twine upload --repository pypi dist/* --verbose
  artifacts:
    paths:
      - dist/*.whl

release-docker:
  stage: release
  only:
    - tags
  needs:
    - release-package
  script:
    - docker build -t $DOCKER_HUB_USERNAME/edgebox:${CI_COMMIT_TAG} .
    # Log in to Docker Hub
    - echo $DOCKER_HUB_ACCESS_TOKEN | docker login -u $DOCKER_HUB_USERNAME --password-stdin
    # Push the Docker Image
    - docker push $DOCKER_HUB_USERNAME/edgebox:${CI_COMMIT_TAG}

