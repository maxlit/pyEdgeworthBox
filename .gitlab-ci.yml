stages:
  - test
  - build
  - dockerize
  - release

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - .cache/pip
    - venv/

.python-base:
  image: python:3.11.7
  before_script:
    - python -V  # Print out python version for debugging
    - pip install  --progress-bar off poetry==1.4.2  # Install Poetry
    - poetry -vvv install --no-root

.docker-base:
  image: docker:20.10.24
  services:
    - docker:20.10.24-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"

test:
  stage: test
  extends: .python-base
  script:
    - poetry run python -m unittest

build-package:
  stage: build
  extends: .python-base
  script:
    - poetry run python setup.py sdist bdist_wheel
  artifacts:
    paths:
      - dist/*.whl
      - dist/*.tar.gz

build-docker:
  stage: dockerize
  extends: .docker-base
  needs: ["build-package"]
  script:
    - docker info
    - docker build -t deleteme .

release-package:
  stage: release
  extends: .python-base
  only:
    - tags
  script:
    - poetry run python setup.py sdist bdist_wheel
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token poetry run python -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*
    - TWINE_PASSWORD=${PYPI_PASSWORD} TWINE_USERNAME=${PYPI_USERNAME} poetry run python -m twine upload --repository pypi dist/* --verbose

release-docker:
  stage: release
  extends: .docker-base
  needs: ["release-package"]
  only:
    - tags
  script:
    - docker build -t $DOCKER_HUB_USERNAME/edgebox:${CI_COMMIT_TAG} .
    - echo $DOCKER_HUB_ACCESS_TOKEN | docker login -u $DOCKER_HUB_USERNAME --password-stdin
    - docker push $DOCKER_HUB_USERNAME/edgebox:${CI_COMMIT_TAG}
